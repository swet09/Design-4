// Time Complexity : 
follow -constant 
unfollow - constant
postTweet - constant
getnewsFeed - n log k where n = number of users X number of tweets by each user k = top 10 news feeds
// Space Complexity : 
HashMap followers - number of users (v^2 bcoz each user follows every other user) 
HashMap tweets - total number of tweets 
PriorityQueue - k top 10 - constant 
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
class Twitter {

    /** Initialize your data structure here. */
    class tweet{
        int tweetId;
        int createdAt;
        public tweet(int tweetId, int createdAt)
        {
            this.tweetId = tweetId;
            this.createdAt = createdAt;
        }
    }
    HashMap<Integer, HashSet<Integer>> followers;
    HashMap<Integer, List<tweet>> tweets;
    int time;
    public Twitter() {
        followers = new HashMap<>();
        tweets = new HashMap<>();
        time =0;
    }
    
    /** Compose a new tweet. */
    public void postTweet(int userId, int tweetId) {
        tweet t1 = new tweet(tweetId, time);
        time++;
       follow(userId, userId);
        if(!tweets.containsKey(userId))
        {
            tweets.put(userId, new ArrayList<>());
        }
        tweets.get(userId).add(t1);
    }
    
    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
    public List<Integer> getNewsFeed(int userId) {
        HashSet<Integer> users = followers.get(userId);
        PriorityQueue<tweet> pq = new PriorityQueue<>((a,b) -> a.createdAt - b.createdAt);
        if( users != null)
        {
            for(int user:users)
            {
                List<tweet> tweetByUsers = tweets.get(user);
                if(tweetByUsers != null)
                {
                   for(tweet tws: tweetByUsers)
                   {
                        pq.add(tws);
                        if(pq.size() > 10)
                        {
                                pq.poll();
                        }
                   }
                }
            }
        }
        List<Integer> result = new ArrayList<>();
        while(!pq.isEmpty())
        {
            result.add(0,pq.poll().tweetId);
        }
        return result;
        
    }
    
    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */
    public void follow(int followerId, int followeeId) {
        if(!followers.containsKey(followerId))
        {
            followers.put(followerId, new HashSet<>());
        }
        followers.get(followerId).add(followeeId);
         
    }
    
    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
    public void unfollow(int followerId, int followeeId) {
         if(followers.containsKey(followerId))
        {
            if(followers.get(followerId).contains(followeeId))
                followers.get(followerId).remove(followeeId);
        }
    }
}

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter obj = new Twitter();
 * obj.postTweet(userId,tweetId);
 * List<Integer> param_2 = obj.getNewsFeed(userId);
 * obj.follow(followerId,followeeId);
 * obj.unfollow(followerId,followeeId);
 */
